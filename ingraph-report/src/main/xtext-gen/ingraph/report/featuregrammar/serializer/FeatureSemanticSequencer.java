/*
 * generated by Xtext 2.10.0
 */
package ingraph.report.featuregrammar.serializer;

import com.google.inject.Inject;
import ingraph.report.featuregrammar.feature.AndStep;
import ingraph.report.featuregrammar.feature.AsA;
import ingraph.report.featuregrammar.feature.Background;
import ingraph.report.featuregrammar.feature.Example;
import ingraph.report.featuregrammar.feature.ExampleCell;
import ingraph.report.featuregrammar.feature.ExampleRow;
import ingraph.report.featuregrammar.feature.Feature;
import ingraph.report.featuregrammar.feature.FeaturePackage;
import ingraph.report.featuregrammar.feature.FreeText;
import ingraph.report.featuregrammar.feature.GivenStep;
import ingraph.report.featuregrammar.feature.IWantTo;
import ingraph.report.featuregrammar.feature.InOrderTo;
import ingraph.report.featuregrammar.feature.Scenario;
import ingraph.report.featuregrammar.feature.ScenarioWithOutline;
import ingraph.report.featuregrammar.feature.ThenStep;
import ingraph.report.featuregrammar.feature.WhenStep;
import ingraph.report.featuregrammar.services.FeatureGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FeatureSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FeatureGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FeaturePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FeaturePackage.AND_STEP:
				sequence_AndStep(context, (AndStep) semanticObject); 
				return; 
			case FeaturePackage.AS_A:
				sequence_AsA(context, (AsA) semanticObject); 
				return; 
			case FeaturePackage.BACKGROUND:
				sequence_Background(context, (Background) semanticObject); 
				return; 
			case FeaturePackage.EXAMPLE:
				sequence_Example(context, (Example) semanticObject); 
				return; 
			case FeaturePackage.EXAMPLE_CELL:
				sequence_ExampleCell(context, (ExampleCell) semanticObject); 
				return; 
			case FeaturePackage.EXAMPLE_ROW:
				sequence_ExampleRow(context, (ExampleRow) semanticObject); 
				return; 
			case FeaturePackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case FeaturePackage.FREE_TEXT:
				sequence_FreeText(context, (FreeText) semanticObject); 
				return; 
			case FeaturePackage.GIVEN_STEP:
				sequence_GivenStep(context, (GivenStep) semanticObject); 
				return; 
			case FeaturePackage.IWANT_TO:
				sequence_IWantTo(context, (IWantTo) semanticObject); 
				return; 
			case FeaturePackage.IN_ORDER_TO:
				sequence_InOrderTo(context, (InOrderTo) semanticObject); 
				return; 
			case FeaturePackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case FeaturePackage.SCENARIO_WITH_OUTLINE:
				sequence_ScenarioWithOutline(context, (ScenarioWithOutline) semanticObject); 
				return; 
			case FeaturePackage.THEN_STEP:
				sequence_ThenStep(context, (ThenStep) semanticObject); 
				return; 
			case FeaturePackage.WHEN_STEP:
				sequence_WhenStep(context, (WhenStep) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Step returns AndStep
	 *     AndStep returns AndStep
	 *
	 * Constraint:
	 *     (text=AND_TEXT desc=OptionalText)
	 */
	protected void sequence_AndStep(ISerializationContext context, AndStep semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.STEP__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.STEP__TEXT));
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.STEP__DESC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.STEP__DESC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndStepAccess().getTextAND_TEXTTerminalRuleCall_0_0(), semanticObject.getText());
		feeder.accept(grammarAccess.getAndStepAccess().getDescOptionalTextParserRuleCall_1_0(), semanticObject.getDesc());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NarrativeElement returns AsA
	 *     AsA returns AsA
	 *
	 * Constraint:
	 *     name=AS_A
	 */
	protected void sequence_AsA(ISerializationContext context, AsA semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAsAAccess().getNameAS_ATerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractScenario returns Background
	 *     Background returns Background
	 *
	 * Constraint:
	 *     (tags+=TAG* name=BACKGROUND_TEXT steps+=Step*)
	 */
	protected void sequence_Background(ISerializationContext context, Background semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExampleCell returns ExampleCell
	 *
	 * Constraint:
	 *     value=EXAMPLE_CELL
	 */
	protected void sequence_ExampleCell(ISerializationContext context, ExampleCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.EXAMPLE_CELL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.EXAMPLE_CELL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExampleCellAccess().getValueEXAMPLE_CELLTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExampleRow returns ExampleRow
	 *
	 * Constraint:
	 *     cells+=ExampleCell+
	 */
	protected void sequence_ExampleRow(ISerializationContext context, ExampleRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Example returns Example
	 *
	 * Constraint:
	 *     (heading=ExampleRow rows+=ExampleRow*)
	 */
	protected void sequence_Example(ISerializationContext context, Example semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (tags+=TAG* name=FEATURE_TEXT elements+=NarrativeElement* scenarios+=AbstractScenario*)
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NarrativeElement returns FreeText
	 *     FreeText returns FreeText
	 *
	 * Constraint:
	 *     name=TEXT
	 */
	protected void sequence_FreeText(ISerializationContext context, FreeText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFreeTextAccess().getNameTEXTTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Step returns GivenStep
	 *     GivenStep returns GivenStep
	 *
	 * Constraint:
	 *     (tags+=TAG* text=GIVEN_TEXT desc=OptionalText)
	 */
	protected void sequence_GivenStep(ISerializationContext context, GivenStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NarrativeElement returns IWantTo
	 *     IWantTo returns IWantTo
	 *
	 * Constraint:
	 *     name=I_WANT_TO
	 */
	protected void sequence_IWantTo(ISerializationContext context, IWantTo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIWantToAccess().getNameI_WANT_TOTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NarrativeElement returns InOrderTo
	 *     InOrderTo returns InOrderTo
	 *
	 * Constraint:
	 *     name=IN_ORDER_TO
	 */
	protected void sequence_InOrderTo(ISerializationContext context, InOrderTo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeaturePackage.Literals.NARRATIVE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInOrderToAccess().getNameIN_ORDER_TOTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AbstractScenario returns ScenarioWithOutline
	 *     ScenarioWithOutline returns ScenarioWithOutline
	 *
	 * Constraint:
	 *     (tags+=TAG* name=SCENARIO_OUTLINE_TEXT elements+=NarrativeElement* steps+=Step+ example=Example)
	 */
	protected void sequence_ScenarioWithOutline(ISerializationContext context, ScenarioWithOutline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractScenario returns Scenario
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (tags+=TAG* name=SCENARIO_TEXT elements+=NarrativeElement* steps+=Step+)
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns ThenStep
	 *     ThenStep returns ThenStep
	 *
	 * Constraint:
	 *     (tags+=TAG* text=THEN_TEXT desc=OptionalText rows+=ExampleRow*)
	 */
	protected void sequence_ThenStep(ISerializationContext context, ThenStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns WhenStep
	 *     WhenStep returns WhenStep
	 *
	 * Constraint:
	 *     (tags+=TAG* text=WHEN_TEXT desc=OptionalText)
	 */
	protected void sequence_WhenStep(ISerializationContext context, WhenStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
