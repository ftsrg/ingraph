/*
 * generated by Xtext 2.10.0
 */
package ingraph.report.featuregrammar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FeatureGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFEATURE_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsNarrativeElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cScenariosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScenariosAbstractScenarioParserRuleCall_3_0 = (RuleCall)cScenariosAssignment_3.eContents().get(0);
		
		//Feature:
		//	tags+=TAG*
		//	name=FEATURE_TEXT?
		//	elements+=NarrativeElement*
		//	scenarios+=AbstractScenario*;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* name=FEATURE_TEXT? elements+=NarrativeElement* scenarios+=AbstractScenario*
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//name=FEATURE_TEXT?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FEATURE_TEXT
		public RuleCall getNameFEATURE_TEXTTerminalRuleCall_1_0() { return cNameFEATURE_TEXTTerminalRuleCall_1_0; }
		
		//elements+=NarrativeElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//NarrativeElement
		public RuleCall getElementsNarrativeElementParserRuleCall_2_0() { return cElementsNarrativeElementParserRuleCall_2_0; }
		
		//scenarios+=AbstractScenario*
		public Assignment getScenariosAssignment_3() { return cScenariosAssignment_3; }
		
		//AbstractScenario
		public RuleCall getScenariosAbstractScenarioParserRuleCall_3_0() { return cScenariosAbstractScenarioParserRuleCall_3_0; }
	}
	public class NarrativeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.NarrativeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInOrderToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsAParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIWantToParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFreeTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NarrativeElement:
		//	InOrderTo | AsA | IWantTo | FreeText;
		@Override public ParserRule getRule() { return rule; }
		
		//InOrderTo | AsA | IWantTo | FreeText
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InOrderTo
		public RuleCall getInOrderToParserRuleCall_0() { return cInOrderToParserRuleCall_0; }
		
		//AsA
		public RuleCall getAsAParserRuleCall_1() { return cAsAParserRuleCall_1; }
		
		//IWantTo
		public RuleCall getIWantToParserRuleCall_2() { return cIWantToParserRuleCall_2; }
		
		//FreeText
		public RuleCall getFreeTextParserRuleCall_3() { return cFreeTextParserRuleCall_3; }
	}
	public class FreeTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.FreeText");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTEXTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FreeText:
		//	name=TEXT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=TEXT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//TEXT
		public RuleCall getNameTEXTTerminalRuleCall_0() { return cNameTEXTTerminalRuleCall_0; }
	}
	public class AsAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.AsA");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameAS_ATerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AsA:
		//	name=AS_A;
		@Override public ParserRule getRule() { return rule; }
		
		//name=AS_A
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//AS_A
		public RuleCall getNameAS_ATerminalRuleCall_0() { return cNameAS_ATerminalRuleCall_0; }
	}
	public class InOrderToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.InOrderTo");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIN_ORDER_TOTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//InOrderTo:
		//	name=IN_ORDER_TO;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IN_ORDER_TO
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//IN_ORDER_TO
		public RuleCall getNameIN_ORDER_TOTerminalRuleCall_0() { return cNameIN_ORDER_TOTerminalRuleCall_0; }
	}
	public class IWantToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.IWantTo");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameI_WANT_TOTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IWantTo:
		//	name=I_WANT_TO;
		@Override public ParserRule getRule() { return rule; }
		
		//name=I_WANT_TO
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//I_WANT_TO
		public RuleCall getNameI_WANT_TOTerminalRuleCall_0() { return cNameI_WANT_TOTerminalRuleCall_0; }
	}
	public class AbstractScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.AbstractScenario");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBackgroundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScenarioWithOutlineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractScenario:
		//	Background | Scenario | ScenarioWithOutline;
		@Override public ParserRule getRule() { return rule; }
		
		//Background | Scenario | ScenarioWithOutline
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_0() { return cBackgroundParserRuleCall_0; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_1() { return cScenarioParserRuleCall_1; }
		
		//ScenarioWithOutline
		public RuleCall getScenarioWithOutlineParserRuleCall_2() { return cScenarioWithOutlineParserRuleCall_2; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSCENARIO_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsNarrativeElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStepsStepParserRuleCall_3_0 = (RuleCall)cStepsAssignment_3.eContents().get(0);
		
		//Scenario:
		//	tags+=TAG*
		//	name=SCENARIO_TEXT
		//	elements+=NarrativeElement*
		//	steps+=Step+;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* name=SCENARIO_TEXT elements+=NarrativeElement* steps+=Step+
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//name=SCENARIO_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SCENARIO_TEXT
		public RuleCall getNameSCENARIO_TEXTTerminalRuleCall_1_0() { return cNameSCENARIO_TEXTTerminalRuleCall_1_0; }
		
		//elements+=NarrativeElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//NarrativeElement
		public RuleCall getElementsNarrativeElementParserRuleCall_2_0() { return cElementsNarrativeElementParserRuleCall_2_0; }
		
		//steps+=Step+
		public Assignment getStepsAssignment_3() { return cStepsAssignment_3; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_3_0() { return cStepsStepParserRuleCall_3_0; }
	}
	public class ScenarioWithOutlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.ScenarioWithOutline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSCENARIO_OUTLINE_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsNarrativeElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cStepsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStepsStepParserRuleCall_3_0 = (RuleCall)cStepsAssignment_3.eContents().get(0);
		private final Assignment cExampleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExampleExampleParserRuleCall_4_0 = (RuleCall)cExampleAssignment_4.eContents().get(0);
		
		//ScenarioWithOutline:
		//	tags+=TAG*
		//	name=SCENARIO_OUTLINE_TEXT
		//	elements+=NarrativeElement*
		//	steps+=Step+
		//	example=Example;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* name=SCENARIO_OUTLINE_TEXT elements+=NarrativeElement* steps+=Step+ example=Example
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//name=SCENARIO_OUTLINE_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SCENARIO_OUTLINE_TEXT
		public RuleCall getNameSCENARIO_OUTLINE_TEXTTerminalRuleCall_1_0() { return cNameSCENARIO_OUTLINE_TEXTTerminalRuleCall_1_0; }
		
		//elements+=NarrativeElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//NarrativeElement
		public RuleCall getElementsNarrativeElementParserRuleCall_2_0() { return cElementsNarrativeElementParserRuleCall_2_0; }
		
		//steps+=Step+
		public Assignment getStepsAssignment_3() { return cStepsAssignment_3; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_3_0() { return cStepsStepParserRuleCall_3_0; }
		
		//example=Example
		public Assignment getExampleAssignment_4() { return cExampleAssignment_4; }
		
		//Example
		public RuleCall getExampleExampleParserRuleCall_4_0() { return cExampleExampleParserRuleCall_4_0; }
	}
	public class ExampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.Example");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEXAMPLE_HEADINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingExampleRowParserRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final Assignment cRowsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowsExampleRowParserRuleCall_2_0 = (RuleCall)cRowsAssignment_2.eContents().get(0);
		
		//Example:
		//	EXAMPLE_HEADING
		//	heading=ExampleRow
		//	rows+=ExampleRow*;
		@Override public ParserRule getRule() { return rule; }
		
		//EXAMPLE_HEADING heading=ExampleRow rows+=ExampleRow*
		public Group getGroup() { return cGroup; }
		
		//EXAMPLE_HEADING
		public RuleCall getEXAMPLE_HEADINGTerminalRuleCall_0() { return cEXAMPLE_HEADINGTerminalRuleCall_0; }
		
		//heading=ExampleRow
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }
		
		//ExampleRow
		public RuleCall getHeadingExampleRowParserRuleCall_1_0() { return cHeadingExampleRowParserRuleCall_1_0; }
		
		//rows+=ExampleRow*
		public Assignment getRowsAssignment_2() { return cRowsAssignment_2; }
		
		//ExampleRow
		public RuleCall getRowsExampleRowParserRuleCall_2_0() { return cRowsExampleRowParserRuleCall_2_0; }
	}
	public class ExampleRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.ExampleRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellsExampleCellParserRuleCall_0_0 = (RuleCall)cCellsAssignment_0.eContents().get(0);
		private final RuleCall cEXAMPLE_ROW_ENDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExampleRow:
		//	cells+=ExampleCell+ EXAMPLE_ROW_END;
		@Override public ParserRule getRule() { return rule; }
		
		//cells+=ExampleCell+ EXAMPLE_ROW_END
		public Group getGroup() { return cGroup; }
		
		//cells+=ExampleCell+
		public Assignment getCellsAssignment_0() { return cCellsAssignment_0; }
		
		//ExampleCell
		public RuleCall getCellsExampleCellParserRuleCall_0_0() { return cCellsExampleCellParserRuleCall_0_0; }
		
		//EXAMPLE_ROW_END
		public RuleCall getEXAMPLE_ROW_ENDTerminalRuleCall_1() { return cEXAMPLE_ROW_ENDTerminalRuleCall_1; }
	}
	public class ExampleCellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.ExampleCell");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEXAMPLE_CELLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExampleCell:
		//	value=EXAMPLE_CELL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EXAMPLE_CELL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EXAMPLE_CELL
		public RuleCall getValueEXAMPLE_CELLTerminalRuleCall_0() { return cValueEXAMPLE_CELLTerminalRuleCall_0; }
	}
	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBACKGROUND_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsStepParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		
		//Background:
		//	tags+=TAG*
		//	name=BACKGROUND_TEXT
		//	steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* name=BACKGROUND_TEXT steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//name=BACKGROUND_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//BACKGROUND_TEXT
		public RuleCall getNameBACKGROUND_TEXTTerminalRuleCall_1_0() { return cNameBACKGROUND_TEXTTerminalRuleCall_1_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_2_0() { return cStepsStepParserRuleCall_2_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGivenStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenStepParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndStepParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Step:
		//	GivenStep | WhenStep | ThenStep | AndStep;
		@Override public ParserRule getRule() { return rule; }
		
		//GivenStep | WhenStep | ThenStep | AndStep
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GivenStep
		public RuleCall getGivenStepParserRuleCall_0() { return cGivenStepParserRuleCall_0; }
		
		//WhenStep
		public RuleCall getWhenStepParserRuleCall_1() { return cWhenStepParserRuleCall_1; }
		
		//ThenStep
		public RuleCall getThenStepParserRuleCall_2() { return cThenStepParserRuleCall_2; }
		
		//AndStep
		public RuleCall getAndStepParserRuleCall_3() { return cAndStepParserRuleCall_3; }
	}
	public class GivenStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.GivenStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextGIVEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescOptionalTextParserRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		
		//GivenStep:
		//	tags+=TAG* text=GIVEN_TEXT desc=OptionalText;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* text=GIVEN_TEXT desc=OptionalText
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//text=GIVEN_TEXT
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//GIVEN_TEXT
		public RuleCall getTextGIVEN_TEXTTerminalRuleCall_1_0() { return cTextGIVEN_TEXTTerminalRuleCall_1_0; }
		
		//desc=OptionalText
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }
		
		//OptionalText
		public RuleCall getDescOptionalTextParserRuleCall_2_0() { return cDescOptionalTextParserRuleCall_2_0; }
	}
	public class WhenStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.WhenStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextWHEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescOptionalTextParserRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		
		//WhenStep:
		//	tags+=TAG* text=WHEN_TEXT desc=OptionalText;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* text=WHEN_TEXT desc=OptionalText
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//text=WHEN_TEXT
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//WHEN_TEXT
		public RuleCall getTextWHEN_TEXTTerminalRuleCall_1_0() { return cTextWHEN_TEXTTerminalRuleCall_1_0; }
		
		//desc=OptionalText
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }
		
		//OptionalText
		public RuleCall getDescOptionalTextParserRuleCall_2_0() { return cDescOptionalTextParserRuleCall_2_0; }
	}
	public class ThenStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.ThenStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTAGTerminalRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTHEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescOptionalTextParserRuleCall_2_0 = (RuleCall)cDescAssignment_2.eContents().get(0);
		private final Assignment cRowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowsExampleRowParserRuleCall_3_0 = (RuleCall)cRowsAssignment_3.eContents().get(0);
		
		//ThenStep:
		//	tags+=TAG* text=THEN_TEXT desc=OptionalText rows+=ExampleRow*;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=TAG* text=THEN_TEXT desc=OptionalText rows+=ExampleRow*
		public Group getGroup() { return cGroup; }
		
		//tags+=TAG*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//TAG
		public RuleCall getTagsTAGTerminalRuleCall_0_0() { return cTagsTAGTerminalRuleCall_0_0; }
		
		//text=THEN_TEXT
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//THEN_TEXT
		public RuleCall getTextTHEN_TEXTTerminalRuleCall_1_0() { return cTextTHEN_TEXTTerminalRuleCall_1_0; }
		
		//desc=OptionalText
		public Assignment getDescAssignment_2() { return cDescAssignment_2; }
		
		//OptionalText
		public RuleCall getDescOptionalTextParserRuleCall_2_0() { return cDescOptionalTextParserRuleCall_2_0; }
		
		//rows+=ExampleRow*
		public Assignment getRowsAssignment_3() { return cRowsAssignment_3; }
		
		//ExampleRow
		public RuleCall getRowsExampleRowParserRuleCall_3_0() { return cRowsExampleRowParserRuleCall_3_0; }
	}
	public class AndStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.AndStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTextAND_TEXTTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescOptionalTextParserRuleCall_1_0 = (RuleCall)cDescAssignment_1.eContents().get(0);
		
		//AndStep:
		//	text=AND_TEXT desc=OptionalText;
		@Override public ParserRule getRule() { return rule; }
		
		//text=AND_TEXT desc=OptionalText
		public Group getGroup() { return cGroup; }
		
		//text=AND_TEXT
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//AND_TEXT
		public RuleCall getTextAND_TEXTTerminalRuleCall_0_0() { return cTextAND_TEXTTerminalRuleCall_0_0; }
		
		//desc=OptionalText
		public Assignment getDescAssignment_1() { return cDescAssignment_1; }
		
		//OptionalText
		public RuleCall getDescOptionalTextParserRuleCall_1_0() { return cDescOptionalTextParserRuleCall_1_0; }
	}
	public class OptionalTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.OptionalText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTEXTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCODETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OptionalText:
		//	TEXT | CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT | CODE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEXT
		public RuleCall getTEXTTerminalRuleCall_0() { return cTEXTTerminalRuleCall_0; }
		
		//CODE
		public RuleCall getCODETerminalRuleCall_1() { return cCODETerminalRuleCall_1; }
	}
	
	
	private final FeatureElements pFeature;
	private final NarrativeElementElements pNarrativeElement;
	private final FreeTextElements pFreeText;
	private final AsAElements pAsA;
	private final InOrderToElements pInOrderTo;
	private final IWantToElements pIWantTo;
	private final AbstractScenarioElements pAbstractScenario;
	private final ScenarioElements pScenario;
	private final ScenarioWithOutlineElements pScenarioWithOutline;
	private final ExampleElements pExample;
	private final ExampleRowElements pExampleRow;
	private final ExampleCellElements pExampleCell;
	private final BackgroundElements pBackground;
	private final StepElements pStep;
	private final GivenStepElements pGivenStep;
	private final WhenStepElements pWhenStep;
	private final ThenStepElements pThenStep;
	private final AndStepElements pAndStep;
	private final OptionalTextElements pOptionalText;
	private final TerminalRule tEXAMPLE_HEADING;
	private final TerminalRule tNNL;
	private final TerminalRule tNL;
	private final TerminalRule tSPACES;
	private final TerminalRule tFEATURE_TEXT;
	private final TerminalRule tIN_ORDER_TO;
	private final TerminalRule tAS_A;
	private final TerminalRule tI_WANT_TO;
	private final TerminalRule tSCENARIO_TEXT;
	private final TerminalRule tSCENARIO_OUTLINE_TEXT;
	private final TerminalRule tBACKGROUND_TEXT;
	private final TerminalRule tWHEN_TEXT;
	private final TerminalRule tTHEN_TEXT;
	private final TerminalRule tGIVEN_TEXT;
	private final TerminalRule tAND_TEXT;
	private final TerminalRule tEXAMPLE_ROW_END;
	private final TerminalRule tEXAMPLE_CELL;
	private final TerminalRule tCODE;
	private final TerminalRule tTAG;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tTEXT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeatureGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFeature = new FeatureElements();
		this.pNarrativeElement = new NarrativeElementElements();
		this.pFreeText = new FreeTextElements();
		this.pAsA = new AsAElements();
		this.pInOrderTo = new InOrderToElements();
		this.pIWantTo = new IWantToElements();
		this.pAbstractScenario = new AbstractScenarioElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioWithOutline = new ScenarioWithOutlineElements();
		this.pExample = new ExampleElements();
		this.pExampleRow = new ExampleRowElements();
		this.pExampleCell = new ExampleCellElements();
		this.pBackground = new BackgroundElements();
		this.pStep = new StepElements();
		this.pGivenStep = new GivenStepElements();
		this.pWhenStep = new WhenStepElements();
		this.pThenStep = new ThenStepElements();
		this.pAndStep = new AndStepElements();
		this.pOptionalText = new OptionalTextElements();
		this.tEXAMPLE_HEADING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.EXAMPLE_HEADING");
		this.tNNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.NNL");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.NL");
		this.tSPACES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.SPACES");
		this.tFEATURE_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.FEATURE_TEXT");
		this.tIN_ORDER_TO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.IN_ORDER_TO");
		this.tAS_A = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.AS_A");
		this.tI_WANT_TO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.I_WANT_TO");
		this.tSCENARIO_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.SCENARIO_TEXT");
		this.tSCENARIO_OUTLINE_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.SCENARIO_OUTLINE_TEXT");
		this.tBACKGROUND_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.BACKGROUND_TEXT");
		this.tWHEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.WHEN_TEXT");
		this.tTHEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.THEN_TEXT");
		this.tGIVEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.GIVEN_TEXT");
		this.tAND_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.AND_TEXT");
		this.tEXAMPLE_ROW_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.EXAMPLE_ROW_END");
		this.tEXAMPLE_CELL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.EXAMPLE_CELL");
		this.tCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.CODE");
		this.tTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.TAG");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.SL_COMMENT");
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.TEXT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.report.featuregrammar.Feature.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ingraph.report.featuregrammar.Feature".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Feature:
	//	tags+=TAG*
	//	name=FEATURE_TEXT?
	//	elements+=NarrativeElement*
	//	scenarios+=AbstractScenario*;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//NarrativeElement:
	//	InOrderTo | AsA | IWantTo | FreeText;
	public NarrativeElementElements getNarrativeElementAccess() {
		return pNarrativeElement;
	}
	
	public ParserRule getNarrativeElementRule() {
		return getNarrativeElementAccess().getRule();
	}
	
	//FreeText:
	//	name=TEXT;
	public FreeTextElements getFreeTextAccess() {
		return pFreeText;
	}
	
	public ParserRule getFreeTextRule() {
		return getFreeTextAccess().getRule();
	}
	
	//AsA:
	//	name=AS_A;
	public AsAElements getAsAAccess() {
		return pAsA;
	}
	
	public ParserRule getAsARule() {
		return getAsAAccess().getRule();
	}
	
	//InOrderTo:
	//	name=IN_ORDER_TO;
	public InOrderToElements getInOrderToAccess() {
		return pInOrderTo;
	}
	
	public ParserRule getInOrderToRule() {
		return getInOrderToAccess().getRule();
	}
	
	//IWantTo:
	//	name=I_WANT_TO;
	public IWantToElements getIWantToAccess() {
		return pIWantTo;
	}
	
	public ParserRule getIWantToRule() {
		return getIWantToAccess().getRule();
	}
	
	//AbstractScenario:
	//	Background | Scenario | ScenarioWithOutline;
	public AbstractScenarioElements getAbstractScenarioAccess() {
		return pAbstractScenario;
	}
	
	public ParserRule getAbstractScenarioRule() {
		return getAbstractScenarioAccess().getRule();
	}
	
	//Scenario:
	//	tags+=TAG*
	//	name=SCENARIO_TEXT
	//	elements+=NarrativeElement*
	//	steps+=Step+;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//ScenarioWithOutline:
	//	tags+=TAG*
	//	name=SCENARIO_OUTLINE_TEXT
	//	elements+=NarrativeElement*
	//	steps+=Step+
	//	example=Example;
	public ScenarioWithOutlineElements getScenarioWithOutlineAccess() {
		return pScenarioWithOutline;
	}
	
	public ParserRule getScenarioWithOutlineRule() {
		return getScenarioWithOutlineAccess().getRule();
	}
	
	//Example:
	//	EXAMPLE_HEADING
	//	heading=ExampleRow
	//	rows+=ExampleRow*;
	public ExampleElements getExampleAccess() {
		return pExample;
	}
	
	public ParserRule getExampleRule() {
		return getExampleAccess().getRule();
	}
	
	//ExampleRow:
	//	cells+=ExampleCell+ EXAMPLE_ROW_END;
	public ExampleRowElements getExampleRowAccess() {
		return pExampleRow;
	}
	
	public ParserRule getExampleRowRule() {
		return getExampleRowAccess().getRule();
	}
	
	//ExampleCell:
	//	value=EXAMPLE_CELL;
	public ExampleCellElements getExampleCellAccess() {
		return pExampleCell;
	}
	
	public ParserRule getExampleCellRule() {
		return getExampleCellAccess().getRule();
	}
	
	//Background:
	//	tags+=TAG*
	//	name=BACKGROUND_TEXT
	//	steps+=Step*;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}
	
	//Step:
	//	GivenStep | WhenStep | ThenStep | AndStep;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//GivenStep:
	//	tags+=TAG* text=GIVEN_TEXT desc=OptionalText;
	public GivenStepElements getGivenStepAccess() {
		return pGivenStep;
	}
	
	public ParserRule getGivenStepRule() {
		return getGivenStepAccess().getRule();
	}
	
	//WhenStep:
	//	tags+=TAG* text=WHEN_TEXT desc=OptionalText;
	public WhenStepElements getWhenStepAccess() {
		return pWhenStep;
	}
	
	public ParserRule getWhenStepRule() {
		return getWhenStepAccess().getRule();
	}
	
	//ThenStep:
	//	tags+=TAG* text=THEN_TEXT desc=OptionalText rows+=ExampleRow*;
	public ThenStepElements getThenStepAccess() {
		return pThenStep;
	}
	
	public ParserRule getThenStepRule() {
		return getThenStepAccess().getRule();
	}
	
	//AndStep:
	//	text=AND_TEXT desc=OptionalText;
	public AndStepElements getAndStepAccess() {
		return pAndStep;
	}
	
	public ParserRule getAndStepRule() {
		return getAndStepAccess().getRule();
	}
	
	//OptionalText:
	//	TEXT | CODE;
	public OptionalTextElements getOptionalTextAccess() {
		return pOptionalText;
	}
	
	public ParserRule getOptionalTextRule() {
		return getOptionalTextAccess().getRule();
	}
	
	//terminal EXAMPLE_HEADING:
	//	'Examples' SPACES ':' SPACES '\r'? '\n';
	public TerminalRule getEXAMPLE_HEADINGRule() {
		return tEXAMPLE_HEADING;
	}
	
	//terminal fragment NNL:
	//	!('\r' | '\n');
	public TerminalRule getNNLRule() {
		return tNNL;
	}
	
	//terminal fragment NL:
	//	'\r'? '\n';
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal fragment SPACES:
	//	' ' | '\t'*;
	public TerminalRule getSPACESRule() {
		return tSPACES;
	}
	
	//terminal FEATURE_TEXT:
	//	('Narrative:' | 'Feature:') NNL* NL;
	public TerminalRule getFEATURE_TEXTRule() {
		return tFEATURE_TEXT;
	}
	
	//terminal IN_ORDER_TO:
	//	'In order to' NNL* NL;
	public TerminalRule getIN_ORDER_TORule() {
		return tIN_ORDER_TO;
	}
	
	//terminal AS_A:
	//	'As a' NNL* NL;
	public TerminalRule getAS_ARule() {
		return tAS_A;
	}
	
	//terminal I_WANT_TO:
	//	'I want to ' NNL* NL;
	public TerminalRule getI_WANT_TORule() {
		return tI_WANT_TO;
	}
	
	//terminal SCENARIO_TEXT:
	//	'Scenario' SPACES ':' NNL* NL;
	public TerminalRule getSCENARIO_TEXTRule() {
		return tSCENARIO_TEXT;
	}
	
	//terminal SCENARIO_OUTLINE_TEXT:
	//	'Scenario' SPACES 'Outline' SPACES ':' NNL* NL;
	public TerminalRule getSCENARIO_OUTLINE_TEXTRule() {
		return tSCENARIO_OUTLINE_TEXT;
	}
	
	//terminal BACKGROUND_TEXT:
	//	'Background' SPACES ':' NNL* NL;
	public TerminalRule getBACKGROUND_TEXTRule() {
		return tBACKGROUND_TEXT;
	}
	
	//terminal WHEN_TEXT:
	//	'When ' NNL* NL;
	public TerminalRule getWHEN_TEXTRule() {
		return tWHEN_TEXT;
	}
	
	//terminal THEN_TEXT:
	//	'Then ' NNL* NL;
	public TerminalRule getTHEN_TEXTRule() {
		return tTHEN_TEXT;
	}
	
	//terminal GIVEN_TEXT:
	//	'Given ' NNL* NL;
	public TerminalRule getGIVEN_TEXTRule() {
		return tGIVEN_TEXT;
	}
	
	//terminal AND_TEXT:
	//	'And ' NNL* NL;
	public TerminalRule getAND_TEXTRule() {
		return tAND_TEXT;
	}
	
	//terminal EXAMPLE_ROW_END:
	//	'|' SPACES NL;
	public TerminalRule getEXAMPLE_ROW_ENDRule() {
		return tEXAMPLE_ROW_END;
	}
	
	//terminal EXAMPLE_CELL:
	//	'|' !('\r' | '\n' | '|')+;
	public TerminalRule getEXAMPLE_CELLRule() {
		return tEXAMPLE_CELL;
	}
	
	//terminal CODE:
	//	'"""'->'"""' | "'''"->"'''";
	public TerminalRule getCODERule() {
		return tCODE;
	}
	
	//terminal TAG:
	//	'@' NNL+ NL;
	public TerminalRule getTAGRule() {
		return tTAG;
	}
	
	//terminal SL_COMMENT:
	//	'#' NNL* NL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal TEXT:
	//	!('|' | ' ' | '\t' | '\r' | '\n' | '@') NNL* NL;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
