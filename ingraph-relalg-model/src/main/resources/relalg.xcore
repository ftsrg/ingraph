@Ecore(nsURI="http://ingraph/relalg")
@GenModel(bundleManifest="false",
  modelDirectory="ingraph-relalg-model/build/xcore/main",
  complianceLevel="8.0")
package relalg

type Function wraps relalg.function.Function

class RelalgContainer {
  String name
  contains Operator rootExpression
  contains NamedElement[] elements opposite namedElementContainer
  contains Expression[] expressions opposite ^container
  boolean incrementalPlan = "false"
  boolean basicSchemaInferred = "false"
  boolean extraAttributesInferred = "false"
  boolean fullSchemaInferred = "false"
}

abstract class NamedElement {
  String name
  refers RelalgContainer namedElementContainer opposite elements
}

abstract class Label extends NamedElement {
}

class VertexLabel extends Label {
}

class EdgeLabel extends Label {
}

/**
 * A set of labels.
 */
abstract class LabelSet {
  LabelSetStatus status = "EMPTY"
}

/**
 * A vertex satisfies a labelset constraint iff it has all the labels in the labelset.
 *
 * The vertex itself might has more labels, so in case of more than one labelset constraint
 * for a single vertex variable, it is always satisfiable, i.e.
 * LabelSet.status should never be LabelSetStatus.CONTRADICTING.
 */
class VertexLabelSet extends LabelSet {
  refers VertexLabel[] vertexLabels // the vertex must have *all* of these labels
}

/**
 * An edge satisfies a labelset constraint iff it has any of the labels in the labelset.
 * An edge might has at most one label.
 *
 * For an edge variable, the combination of the following labelset constraints
 * is contradicting, thus un-satisfiable:
 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
 *  2. [edge1:C], so edge1 needs to have label C.
 * These are contradicting as a single edge instance can have at most one label.
 */
class EdgeLabelSet extends LabelSet {
  refers EdgeLabel[] edgeLabels // the edge must have *one* of these labels
}

/**
 * VariableExpression is a generic container for a variable to make it easy
 * to include into expressions.
 *
 * Various sub-types like VariableComparableExpression, VariableArithmeticExpression
 * exists to allow type-safe building of expressions. However keep in mind, that
 * it is not guaranteed that the variable will hold a value that is e.g.
 * comparable in case of a VariableComparableExpression.
 * Type check is always needed in query execution time!
 */
class VariableExpression extends Expression {
	refers Variable variable
}

/**
 * Container for a variable to be placed in comparable position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableComparableExpression extends VariableExpression, ComparableExpression {
}

/**
 * Container for a variable to be placed in string expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableStringExpression extends VariableExpression, StringExpression {
}

/**
 * Container for a variable to be placed in arithmetic expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableArithmeticExpression extends VariableExpression, ArithmeticExpression {
}

/**
 * Container for a variable to be placed in list expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableListExpression extends VariableExpression, ListExpression {
}

/**
 * FunctionExpression is a generic container for a function call descriptor,
 * i.e. the functor and its argument expressions.
 *
 * Various sub-types like FunctionComparableExpression, FunctionArithmeticExpression
 * exists to allow type-safe building of expressions. However keep in mind, that
 * it is not guaranteed that it will refer to a function that is e.g.
 * comparable in case of a FunctionComparableExpression.
 * Type check is always needed in query execution time!
 */
class FunctionExpression extends Expression {
  Function functor
  refers Expression[] arguments
}

/**
 * Container for a function call to be placed in comparable position.
 *
 * Note: type check is always needed in query execution time!
 */
class FunctionComparableExpression extends FunctionExpression, ComparableExpression {
}

/**
 * Container for a function call to be placed in arithmetic expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class FunctionArithmeticExpression extends FunctionExpression, ArithmeticExpression {
}

/**
 * Container for a function call to be placed in logical expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class FunctionLogicalExpression extends FunctionExpression, LogicalExpression {
}

/* Variables */
abstract class Variable extends NamedElement {
  boolean dontCare = "false"
}

/* common superclass for vertices, edges and attributes */
abstract class GraphObjectVariable extends Variable {
}

abstract class ElementVariable extends GraphObjectVariable {
  refers AttributeVariable[] attributes opposite element
}

class VertexVariable extends ElementVariable {
  contains VertexLabelSet vertexLabelSet // the vertex must have *all* of these labels
}

class EdgeVariable extends ElementVariable {
  contains EdgeLabelSet edgeLabelSet // the edge must have *one* of these labels
}

class AttributeVariable extends GraphObjectVariable {
  refers ElementVariable element opposite attributes
}

class ListVariable extends Variable {
}

/**
 * Represents a named expression like returned elements.
 */
class ExpressionVariable extends Variable {
  boolean hasInferredName
  refers Expression expression
}

/* Operators */
abstract class Operator {
  refers Variable[] basicSchema
  refers Variable[] extraAttributes
  refers Variable[] fullSchema
  contains Cardinality cardinality
}

class Cardinality {
  double value
}

/* Nullary operators */
abstract class NullaryOperator extends Operator {
}

class GetVerticesOperator extends NullaryOperator {
  refers VertexVariable vertexVariable
}

/**
 * Dual graph object source, that should always return a single tuple, i.e. ()
 */
class DualObjectSourceOperator extends NullaryOperator {
}

// (sourceVertexVariable)-[edgeVariable]->(targetVertexVariable)
class GetEdgesOperator extends NullaryOperator {
  refers VertexVariable sourceVertexVariable
  refers EdgeVariable edgeVariable
  refers VertexVariable targetVertexVariable
}

/* Unary operators */
abstract class UnaryOperator extends Operator {
  contains Operator input
}

class ProductionOperator extends UnaryOperator {
}

class SelectionOperator extends UnaryOperator {
  String conditionString
  refers LogicalExpression condition
}

class ProjectionOperator extends UnaryOperator {
  refers ExpressionVariable[] elements
  int[] tupleIndices
}

abstract class NavigationOperator extends Operator {
  int minHops
  contains MaxHops maxHops  
  Direction direction
  refers VertexVariable sourceVertexVariable
  refers EdgeVariable edgeVariable
  refers VertexVariable targetVertexVariable
}

enum MaxHopsType {
  LIMITED, UNLIMITED
}

class MaxHops {
  MaxHopsType maxHopsType
  int hops
}

class ExpandOperator extends UnaryOperator, NavigationOperator {
}


abstract class TernaryOperator extends Operator {
  contains Operator leftInput
  contains Operator middleInput
  contains Operator rightInput
}

class PathOperator extends TernaryOperator, NavigationOperator {
  PathSemantics semantics
  contains VariableListExpression listVariable
}

class DuplicateEliminationOperator extends UnaryOperator {
}

class AllDifferentOperator extends UnaryOperator {
  refers EdgeVariable[] edgeVariables
  contains EdgeVariableSet edgeVariableSets
}

class EdgeVariableSet { // TODO - we should think about this a bit more
  refers EdgeVariable[] edgeVariables
}

class SortOperator extends UnaryOperator {
  contains SortEntry[] entries
}

class SortEntry {
  refers Expression expression
  OrderDirection direction
}

class TopOperator extends UnaryOperator {
  contains SkipLimitValue skip
  contains SkipLimitValue limit
}

// for incremental queries to handle sort and top as a single operator
class SortAndTopOperator extends SortOperator, TopOperator {
}

class SkipLimitValue {
  int value
}

class GroupingOperator extends UnaryOperator {
  refers Variable[] entries
}

class UnwindOperator extends UnaryOperator {
  // UNWIND <sourceVariable> AS <targetVariable>
  refers Variable sourceVariable
  refers Variable targetVariable
}

/* Binary operators */
abstract class BinaryOperator extends Operator {
  contains Operator leftInput
  contains Operator rightInput
}

abstract class CommutativeBinaryOperator extends BinaryOperator {
}

abstract class AssociativeBinaryOperator extends BinaryOperator {
}

abstract class AbstractJoinOperator extends BinaryOperator {
  refers Variable[] commonVariables
  int[] leftMask
  int[] rightMask
}

// abstract class for operator that implement an equijoin-like operation (
abstract class EquiJoinLikeOperator extends AbstractJoinOperator {
}

class LeftOuterJoinOperator extends EquiJoinLikeOperator {
}

class JoinOperator extends EquiJoinLikeOperator, CommutativeBinaryOperator, AssociativeBinaryOperator {
}

class AntiJoinOperator extends AbstractJoinOperator {
}

class UnionOperator extends CommutativeBinaryOperator, AssociativeBinaryOperator {
  boolean bag // set or bag union
}

/* expression */
abstract class Expression {
  refers RelalgContainer ^container opposite expressions
  String text
}

abstract class CaseExpression extends Expression {

}

class SimpleCaseExpression extends Expression {
  refers Expression test
  refers Case[] cases
  refers Expression default_
}

abstract class ArithmeticExpression extends ComparableExpression {
}

abstract class UnaryExpression extends Expression {
}

abstract class BinaryExpression extends Expression {
}

// arithmetic operations evaluate to a number, hence they are arithmetic expressins
class ArithmeticOperationExpression extends BinaryExpression, ArithmeticExpression {
  BinaryArithmeticOperatorType operator
  refers ArithmeticExpression leftOperand
  refers ArithmeticExpression rightOperand
}

class UnaryArithmeticOperationExpression extends UnaryExpression, ArithmeticExpression {
  UnaryArithmeticOperatorType operator
  refers ArithmeticExpression operand
}

// arithmetic comparisons evaluate to true/false, hence they are logical expressions
class ArithmeticComparisonExpression extends BinaryExpression, LogicalExpression {
  ArithmeticComparisonOperatorType operator
  refers ComparableExpression leftOperand
  refers ComparableExpression rightOperand
}

// not sure what we will make of this
abstract class StringExpression extends ComparableExpression {
}

abstract class LogicalExpression extends Expression {
}

/**
 * ListExpression represents a list of expressions (of type Expression).
 *
 * The empty list is an instance of the EmptyListExpression.
 *
 * The non-empty list is composed of a head (exactly one element, always non-null Java value)
 * and a tail, which, again is a list (of type ListExpression).
 *
 * If we denote the empty list by [] (which, again, is of the type EmptyListExpression),
 * and the non-empty list by [ head | tail ],
 * then the list <1, 2, 3> is represented as:
 * [ 1 | [ 2 | [ 3 | [] ] ] ]
 */
class ListExpression extends Expression {
	refers Expression head
	refers ListExpression tail
}

/**
 * An instance of this type represents the empty list.
 * It's head and tail attribute should never be used!
 */
class EmptyListExpression extends ListExpression {
}

class Parameter extends ComparableExpression {
  String name
}

class BinaryLogicalExpression extends BinaryExpression, LogicalExpression {
  BinaryLogicalOperatorType operator
  refers LogicalExpression leftOperand
  refers LogicalExpression rightOperand
}

class UnaryLogicalExpression extends UnaryExpression, LogicalExpression {
  UnaryLogicalOperatorType operator
  refers LogicalExpression operand
}

// for conditions like "vertexVariable IS NULL" or
// "edgeVariable.attribute IS NOT NULL"
// TODO: possibly later this can be generalized and merged with UnaryLogicalExpression
class UnaryGraphObjectLogicalExpression extends UnaryExpression, LogicalExpression {
  UnaryGraphObjectLogicalOperatorType operator
  refers Variable operand
}

abstract class ComparableExpression extends Expression {
}

abstract class Atom extends Expression {
}

abstract class Literal extends Atom {
}

class BooleanLiteral extends Literal, LogicalExpression {
  boolean value
}

class StringLiteral extends Literal, StringExpression {
  String value
}

abstract class NumberLiteral extends Literal, ArithmeticExpression {
}

class DoubleLiteral extends NumberLiteral {
  double value
}

class IntegerLiteral extends NumberLiteral {
  int value
}

class NullLiteral extends NumberLiteral, StringLiteral {
}

class Case {
  refers Expression when
  refers Expression then
}

/* enums */
enum Direction {
  BOTH
  IN
  OUT
}

enum OrderDirection {
  ASCENDING
  DESCENDING
}

enum BinaryArithmeticOperatorType {
  PLUS
  MINUS
  MULTIPLICATION
  DIVISION
  MOD
  POWER
}

enum ArithmeticComparisonOperatorType {
  EQUAL_TO
  NOT_EQUAL_TO
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
}

enum UnaryArithmeticOperatorType {
  MINUS
  PLUS
}

enum BinaryLogicalOperatorType {
  AND
  OR
  XOR
}

enum UnaryLogicalOperatorType {
  NOT
  IS_NULL
  IS_NOT_NULL
}

enum UnaryGraphObjectLogicalOperatorType {
  IS_NULL
  IS_NOT_NULL
}

enum AggregationType {
  COUNT
  SUM
  AVG
  MAX
  MIN
}

/**
 * Indicates if the labelset represented is theoretically satisfiable or not.
 *
 * If it is undefined, it matches every labels.
 * If it is defined, but empty, matching semantics differs:
 *  1. a vertex must have *all* of the labels
 *  2. an edge must have *one* of the labels
 *
 * A labelset can be non-satisfiable (false, also known as contradicting) if,
 * for the same edge variable edge1, the following labelset constraints
 * were given in the query:
 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
 *  2. [edge1:C], so edge1 needs to have label C.
 *  These are contradicting as a single edge instance can have at most one label.
 */
enum LabelSetStatus {
  /** Each edge and vertex satisfies an empty labelset constraint */
  EMPTY
  /**
   * Theoretically, a non-empty labelset constraint is satisfiable,
   * but matching semantics differ for different variables:
   *  1. a vertex must have *all* of the labels
   *  2. an edge must have *one* of the labels
   */
  NON_EMPTY
  /**
   * A labelset constraint might be non-satisfiable,
   * in case it is a combination of multiple  labelset constraints.
   *
   * For an edge variable, the combination of the following labelset constraints
   * is contradicting, thus un-satisfiable:
   *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
   *  2. [edge1:C], so edge1 needs to have label C.
   * These are contradicting as a single edge instance can have at most one label.
   */
  CONTRADICTING
}

/**
 * example data set:
 *
 CREATE
  (a:Node {name: 'a'}),
  (b:Node {name: 'b'}),
  (c:Node {name: 'c'}),
  (a)-[:REL {x: 1}]->(b)-[:REL {x: 2}]->(c),
  (a)-[:REL {x: 3}]->(c),
  (a)-[:REL {x: 4}]->(c)
 */
enum PathSemantics {
/**
query

MATCH p=( (a {name: 'a'})-[r:REL*]->(c {name: 'c'}) )
RETURN r, p

results
╒════════════════╤═════════════════════════════════════════════════╕
│r               │p                                                │
╞════════════════╪═════════════════════════════════════════════════╡
│[{x: 4}]        │[{name: a}, {x: 4}, {name: c}]                   │
├────────────────┼─────────────────────────────────────────────────┤
│[{x: 3}]        │[{name: a}, {x: 3}, {name: c}]                   │
├────────────────┼─────────────────────────────────────────────────┤
│[{x: 1}, {x: 2}]│[{name: a}, {x: 1}, {name: b}, {x: 2}, {name: c}]│
└────────────────┴─────────────────────────────────────────────────┘
 */
  ALL_PATHS

/**
query

MATCH p=shortestPath( (a {name: 'a'})-[r:REL*]->(c {name: 'c'}) )
RETURN r, p

results
╒════════╤══════════════════════════════╕
│r       │p                             │
╞════════╪══════════════════════════════╡
│[{x: 3}]│[{name: a}, {x: 3}, {name: c}]│
└────────┴──────────────────────────────┘
 */
  SHORTEST_PATH

/**
query

MATCH p=allShortestPaths( (a {name: 'a'})-[r:REL*]->(c {name: 'c'}) )
RETURN r, p

results
╒════════╤══════════════════════════════╕
│r       │p                             │
╞════════╪══════════════════════════════╡
│[{x: 3}]│[{name: a}, {x: 3}, {name: c}]│
├────────┼──────────────────────────────┤
│[{x: 4}]│[{name: a}, {x: 4}, {name: c}]│
└────────┴──────────────────────────────┘
 */
  ALL_SHORTEST_PATH
}