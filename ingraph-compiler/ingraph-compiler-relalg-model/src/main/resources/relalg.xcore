@Ecore(nsURI="http://ingraph/relalg")
@GenModel(bundleManifest="false",
  modelDirectory="ingraph-compiler-relalg-model/build/xcore/main",
  complianceLevel="8.0")
package relalg

type Function wraps relalg.function.Function
type Bigint wraps java.math.BigInteger

class RelalgContainer {
  String name
  contains Operator rootExpression
  contains NamedElement[] elements opposite namedElementContainer
  contains Expression[] expressions opposite expressionContainer
  boolean simplifiedPlan = "false"
  boolean incrementalPlan = "false"
  boolean externalSchemaInferred = "false"
  boolean extraVariablesInferred = "false"
  boolean internalSchemaInferred = "false"
}

abstract class RelalgModelElement {
  op String fullName() { throw new UnsupportedOperationException("fullName() method not implemented for class " + class.name) }
}

abstract class NamedElement extends RelalgModelElement {
  String name
  refers RelalgContainer namedElementContainer opposite elements
  op String fullName() { return name }
}

abstract class Label extends NamedElement {
}

class VertexLabel extends Label {
}

class EdgeLabel extends Label {
}

/*
 * A set of labels.
 */
abstract class LabelSet {
  LabelSetStatus status = "EMPTY"
}

/*
 * A vertex satisfies a label set constraint iff it has all the labels in the label set.
 *
 * The vertex itself might has more labels, so in case of more than one label set constraint
 * for a single vertex variable, it is always satisfiable, i.e.
 * LabelSet.status should never be LabelSetStatus.CONTRADICTING.
 */
class VertexLabelSet extends LabelSet {
  refers VertexLabel[] vertexLabels // the vertex must have *all* of these labels
}

/*
 * An edge satisfies a label set constraint iff it has any of the labels in the label set.
 * An edge might has at most one label.
 *
 * For an edge variable, the combination of the following label set constraints
 * is contradicting, thus un-satisfiable:
 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
 *  2. [edge1:C], so edge1 needs to have label C.
 * These are contradicting as a single edge instance can have at most one label.
 */
class EdgeLabelSet extends LabelSet {
  refers EdgeLabel[] edgeLabels // the edge must have *one* of these labels
}

/*
 * VariableExpression is a generic container for a variable to make it easy
 * to include into expressions.
 *
 * Various sub-types like VariableComparableExpression, VariableArithmeticExpression
 * exists to allow type-safe building of expressions. However keep in mind, that
 * it is not guaranteed that the variable will hold a value that is e.g.
 * comparable in case of a VariableComparableExpression.
 * Type check is always needed in query execution time!
 */
class VariableExpression extends Expression {
  refers Variable variable
  op String fullName() { variable.fullName() }
}

/*
 * Container for a variable to be placed in comparable position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableComparableExpression extends VariableExpression, ComparableExpression {
}

/*
 * Container for a variable to be placed in string expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableStringExpression extends VariableExpression, StringExpression {
}

/*
 * Container for a variable to be placed in arithmetic expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableArithmeticExpression extends VariableExpression, ArithmeticExpression {
}

/*
 * Container for a variable to be placed in list expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class VariableListExpression extends VariableExpression, ListExpression {
}

/*
 * FunctionExpression is a generic container for a function call descriptor,
 * i.e. the functor and its argument expressions.
 *
 * Various sub-types like FunctionComparableExpression, FunctionArithmeticExpression
 * exists to allow type-safe building of expressions. However keep in mind, that
 * it is not guaranteed that it will refer to a function that is e.g.
 * comparable in case of a FunctionComparableExpression.
 * Type check is always needed in query execution time!
 */
class FunctionExpression extends Expression {
  Function functor
  refers Expression[] arguments
  op String fullName() { return functor + "(" + arguments.map[fullName].join(", ") + ")" }
}

/*
 * Container for a function call to be placed in comparable position.
 *
 * Note: type check is always needed in query execution time!
 */
class FunctionComparableExpression extends FunctionExpression, ComparableExpression {
}

/*
 * Container for a function call to be placed in arithmetic expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class FunctionArithmeticExpression extends FunctionExpression, ArithmeticExpression {
}

/*
 * Container for a function call to be placed in logical expression position.
 *
 * Note: type check is always needed in query execution time!
 */
class FunctionLogicalExpression extends FunctionExpression, LogicalExpression {
}

abstract class Variable extends NamedElement {
  boolean dontCare = "false"
}

/*
 * Common superclass for vertices, edges and attributes
 */
abstract class GraphObjectVariable extends Variable {
}

/*
 * Common superclass for vertices and edges
 */
abstract class ElementVariable extends GraphObjectVariable {
  refers AttributeVariable[] attributes opposite element
  refers PropertyList properties
}

class VertexVariable extends ElementVariable {
  /*
   * Set of labels for the vertex. The vertex must have *all* of these labels.
   */
  contains VertexLabelSet vertexLabelSet
}

abstract class AbstractEdgeVariable extends ElementVariable {
  contains EdgeLabelSet edgeLabelSet // the edge must have *one* of these labels
}

class EdgeVariable extends AbstractEdgeVariable {
}

/*
 * This is the variable for r in the query below:
 * MATCH (m)-[r*2..5]->(n)
 * RETURN m, r, n
 */
class EdgeListVariable extends AbstractEdgeVariable {
  int minHops
  contains MaxHops maxHops
}

/*
 * Describes an attribute lookup on a variable.
 * The base variable might be of type ElementVariable or ExpressionVariable,
 * and if so, element xor expVar is filled, respectively.
 */
class AttributeVariable extends GraphObjectVariable {
  refers ElementVariable element opposite attributes
  refers ExpressionVariable expVar
  op Variable getBaseVariable() {
    if (element !== null && expVar === null) {
      return element
    } else if (element === null && expVar !== null) {
      return expVar
    } else if (element === null && expVar === null) {
      throw new IllegalStateException("AttributeVariable must have non-null value for either element or expVar, but both are null.")
    } else {
      throw new IllegalStateException("AttributeVariable must have non-null value for either element or expVar, but not for both.")
    }
  }
  op String fullName() { return baseVariable.name + "." + name }
}

class ListVariable extends Variable {
}

class PathVariable extends Variable {
  // FIXME: what's inside a PathVariable
}

/*
 * Represents a named expression like returned elements.
 */
class ExpressionVariable extends Variable {
  boolean hasInferredName // true iff the name can be inferred from the expression (and hence the name attribute is null)
  refers Expression expression
  op String fullName() {
    return if (hasInferredName) {
      if (expression instanceof VariableExpression) {
        (expression as VariableExpression).variable.name
      } else {
        expression.fullName // not sure - Szarnyasg
      }
    } else {
      name
    }
  }
}

abstract class Operator {
  refers Variable[] externalSchema
  refers Variable[] extraVariables
  refers Variable[] internalSchema
  contains Cardinality cardinality
}

class Cardinality {
  double value
}

abstract class NullaryOperator extends Operator {
}

class GetVerticesOperator extends NullaryOperator {
  refers VertexVariable vertexVariable
}

/*
 * Singular graph object source, i.e. the singularity, that should always return zero tuples
 */
class SingularObjectSourceOperator extends NullaryOperator {
}

/*
 * Dual graph object source, that should always return a single tuple, i.e. ()
 */
class DualObjectSourceOperator extends NullaryOperator {
}

/*
 * Note: while this has a direction, a directed edge should always be described as
 * (sourceVertexVariable)-[edgeVariable]->(targetVertexVariable)
 */
class GetEdgesOperator extends NullaryOperator, NavigationDescriptor {
}

abstract class UnaryOperator extends Operator {
  contains Operator input
}


/*
 * A projection-like operator that is only capable of performing a projection operation.
 */
abstract class BeamerOperator extends UnaryOperator {
  refers ExpressionVariable[] elements
  refers ExpressionVariable[] internalElements
  int[] tupleIndices
}

/*
 * Currently, the ProductionOperator is used to "trim" extra variables that are part of the internal schema
 * (as they are required for processing the query), but are not specified in the external schema.
 *
 * TODO: In the future, it should also be able to collect attributes for a specific vertex/edge.
 * For example, if the user specifies the following query:
 *
 * MATCH (p:Person)-[l:LIKES]->(m:Message)
 * RETURN p, l, m.content
 *
 * We should return a vertex for Person p, an edge for LIKES l (both with all their attribute)
 * and the content attribute of Message m.
 */
class ProductionOperator extends BeamerOperator {
}

/*
 * Represents a condition which can be used for selection, theta-join.
 *
 * Different operators building on this might have different semantics,
 * e.g. for a left outer join, this never filter on the left input
 *
 * - condition holds the actual filtering condition.
 * - conditionString is for informational purposes only. TeX serialization might use this.
 */
abstract class AbstractCondition {
  String conditionString
  refers LogicalExpression condition
}

class SelectionOperator extends UnaryOperator, AbstractCondition {
  op String toString() {
    return "Selection { condition: " + conditionString + " }"
  }
}

/*
 * The ProjectionOperator is the renaissance man of the Rete network.
 *
 * It can:
 * - Project variables to a schema, i.e. only keeping a certain set of variables.
 * - Extract attributes from a vertex/edge, e.g. it can project to n.name, r.weight, etc. (other operators, such as the SelectionOperator are also capable of this feat)
 * - Evaluate metafunctions, such as labels(n), relationship(r), keys(e), properties(e), by relying on input from the NullaryOperators
 *   (i.e. the inferencer algorithm has to propagate these variables to the NullaryOperators)
 * - Evaluate other functions, e.g. sin(x), substring(s, from, to), toBoolean(s), etc.
 */
class ProjectionOperator extends BeamerOperator {
}

/*
 * The GroupingOperator adds grouping functionality to the basic ProjectionOperator.
 *
 * If ProjectionOperator was the renaissance man, this is Baroque of the relational graph algebra model.
 */
class GroupingOperator extends ProjectionOperator {
  // be prepared that eventually expressions will be used as grouping criteria
  refers Expression[] aggregationCriteria
  int[] order
}

/*
 * Represents the create/update/delete operator.
 */
abstract class CUDOperator extends UnaryOperator {
  refers ExpressionVariable[] elements
}

class CreateOperator extends CUDOperator {
}

class DeleteOperator extends CUDOperator {
  boolean detach
}

class NavigationDescriptor extends Expression {
  Direction direction
  refers VertexVariable sourceVertexVariable
  // FIXME (nice-to-have), jmarton, 20170620:
  // some descendants do not support all AbstractEdgeVariable subclasses
  refers AbstractEdgeVariable edgeVariable
  refers VertexVariable targetVertexVariable
}

enum MaxHopsType {
  LIMITED, UNLIMITED
}

class MaxHops {
  MaxHopsType maxHopsType
  int hops
}

class ExpandOperator extends UnaryOperator, NavigationDescriptor {
}

class PathOperator extends ExpandOperator {
  PathSemantics semantics
}

class DuplicateEliminationOperator extends UnaryOperator {
}

class AllDifferentOperator extends UnaryOperator {
  refers AbstractEdgeVariable[] edgeVariables
}

class SortOperator extends UnaryOperator {
  contains SortEntry[] entries
}

class SortEntry {
  refers Expression expression
  OrderDirection direction
}
/*
 * This stands for the SKIP n LIMIT m clause.
 *
 * Expressions in skip and limit may not contain variable references.
 */
class TopOperator extends UnaryOperator {
  refers Expression skip
  refers Expression limit
}

/*
 * For incremental queries to handle sort and top as a single operator.
 */
class SortAndTopOperator extends SortOperator, TopOperator {
}

class UnwindOperator extends UnaryOperator {
  // UNWIND <sourceVariable> AS <targetVariable>
  refers ExpressionVariable element
}

/* Binary operators */
abstract class BinaryOperator extends Operator {
  contains Operator leftInput
  contains Operator rightInput
}

// FIXME: cleanup? jmarton, 20170620
abstract class CommutativeBinaryOperator extends BinaryOperator {
}

// FIXME: cleanup? jmarton, 20170620
abstract class AssociativeBinaryOperator extends BinaryOperator {
}

abstract class AbstractJoinOperator extends BinaryOperator {
  refers Variable[] commonVariables
  int[] leftMask
  int[] rightMask
}

/*
 * For operators that implement an equijoin-like operation.
 */
abstract class EquiJoinLikeOperator extends AbstractJoinOperator {
}

/*
 * Left outer join states that each tuple of its left input will appear
 * on the output regardless of whether a matching tuple
 * on the right input is available or not.
 */
class LeftOuterJoinOperator extends EquiJoinLikeOperator {
}

// FIXME: cleanup? jmarton, 20170620
class ThetaLeftOuterJoinOperator extends LeftOuterJoinOperator, AbstractCondition {
}

class JoinOperator extends EquiJoinLikeOperator, CommutativeBinaryOperator, AssociativeBinaryOperator {
}

class TransitiveClosureJoinOperator extends EquiJoinLikeOperator {
  refers EdgeListVariable edgeListVariable
}

class AntiJoinOperator extends AbstractJoinOperator {
}

class UnionOperator extends BinaryOperator, CommutativeBinaryOperator, AssociativeBinaryOperator {
  boolean bag // set or bag union
}

/* expression */
abstract class Expression extends RelalgModelElement {
  refers RelalgContainer expressionContainer opposite expressions
  String text
}

abstract class CaseExpression extends Expression {
  contains Case[] cases
  refers Expression fallback
  op String fullName() { "TODO" }
}

class GenericCaseExpression extends CaseExpression {
}

class SimpleCaseExpression extends CaseExpression {
  refers Expression test
}

abstract class ArithmeticExpression extends ComparableExpression {
}

abstract class UnaryExpression extends Expression {
}

abstract class BinaryExpression extends Expression {
}

class UnaryArithmeticOperationExpression extends UnaryExpression, ArithmeticExpression {
  UnaryArithmeticOperatorType operator
  refers ArithmeticExpression operand
}

// binary arithmetic operations evaluate to a number, hence they are arithmetic expressins
class BinaryArithmeticOperationExpression extends BinaryExpression, ArithmeticExpression {
  BinaryArithmeticOperatorType operator
  refers ArithmeticExpression leftOperand
  refers ArithmeticExpression rightOperand
  op String fullName() { return leftOperand.fullName + operator + rightOperand.fullName }
}

// arithmetic comparisons evaluate to true/false, hence they are logical expressions
class ArithmeticComparisonExpression extends BinaryExpression, LogicalExpression {
  ArithmeticComparisonOperatorType operator
  refers ComparableExpression leftOperand
  refers ComparableExpression rightOperand
  op String fullName() { return leftOperand.fullName + operator + rightOperand.fullName }
}

// not sure what we will make of this
abstract class StringExpression extends ComparableExpression {
}

abstract class LogicalExpression extends Expression {
}

/*
 * ListExpression represents a list of expressions (of type Expression).
 *
 * The empty list is an instance of the EmptyListExpression.
 *
 * The non-empty list is composed of a head (exactly one element, always non-null Java value)
 * and a tail, which, again is a list (of type ListExpression).
 *
 * If we denote the empty list by [] (which, again, is of the type EmptyListExpression),
 * and the non-empty list by [ head | tail ],
 * then the list <1, 2, 3> is represented as:
 * [ 1 | [ 2 | [ 3 | [] ] ] ]
 */
class ListExpression extends Expression {
  refers Expression head
  refers ListExpression tail
  op String fullName() { return head?.fullName + ", " + tail?.fullName }
}

/*
 * An instance of this type represents the empty list.
 * It's head and tail attribute should never be used!
 */
class EmptyListExpression extends ListExpression {
}

/*
 * Common base to express the subscript operator,
 * i.e. list[0] or list[0..2] (where upper limit is excluded).
 *
 * Indexing is 0-based.
 * List should have a runtime type of a list.
 */
abstract class IndexAccessExpression extends Expression {
	refers Expression list
}

/*
 * 0-based list indexing, e.g. list[0] refers to the first element,
 * list[1] refers to the second, or null if no such element exists in the list.
 */
class IndexSimpleAccessExpression extends IndexAccessExpression {
  int idx
}

/*
 * 0-based, left inclusive, right excluded list range indexing.
 * list[0..2] returns a list of list[0] and list[1] if both exist.
 * If some of the list entries does not exist, it will be omitted,
 * and it list has 2 elements, list[10..20] should evaluate to the empty list.
 */
class IndexRangeAccessExpression extends IndexAccessExpression {
	int lower
	int upper
}

class BinaryLogicalExpression extends BinaryExpression, LogicalExpression {
  BinaryLogicalOperatorType operator
  refers LogicalExpression leftOperand
  refers LogicalExpression rightOperand
}

class UnaryLogicalExpression extends UnaryExpression, LogicalExpression {
  UnaryLogicalOperatorType operator
  refers LogicalExpression operand
}

// for conditions like "vertexVariable IS NULL" or
// "edgeVariable.attribute IS NOT NULL"
// TODO: possibly later this can be generalized and merged with UnaryLogicalExpression
class UnaryGraphObjectLogicalExpression extends UnaryExpression, LogicalExpression {
  UnaryGraphObjectLogicalOperatorType operator
  refers Variable operand
}

abstract class ComparableExpression extends Expression {
}

abstract class Atom extends Expression {
}

abstract class Literal extends Atom {
}

class BooleanLiteral extends Literal, LogicalExpression {
  boolean value
  op String fullName() { return value.toString }
}

class StringLiteral extends Literal, StringExpression {
  String value
  op String fullName() { return value }
}

abstract class NumberLiteral extends Literal, ArithmeticExpression {
}

class DoubleLiteral extends NumberLiteral {
  double value
  op String fullName() { return value.toString }
}

class BigIntegerLiteral extends NumberLiteral {
  Bigint value
  op String fullName() { return value.toString }
}

class IntegerLiteral extends NumberLiteral {
  long value
  op String fullName() { return value.toString }
}

class NullLiteral extends NumberLiteral, StringLiteral {
}

class Parameter extends NamedElement, Atom {
}

/*
 * Container for a parameter to be placed in comparable position.
 */
class ParameterComparableExpression extends ComparableExpression {
  refers Parameter parameter
}


/*
 * This will hold the map-like construct that is used
 * to represent vertex or edge constraints as well as
 * "values" clause for DML operations.
 */
class PropertyList extends Expression {
  contains PropertyListEntry[] entries
}

/*
 * An entry has its name which corresponds to the attribute name
 * and its value is an expression.
 */
class PropertyListEntry wraps java.util.Map$Entry {
  String key
  refers Expression value
}

class Case {
  refers Expression when
  refers Expression then
}

/* enums */
enum Direction {
  BOTH
  IN
  OUT
}

enum OrderDirection {
  ASCENDING
  DESCENDING
}

enum BinaryArithmeticOperatorType {
  PLUS
  MINUS
  MULTIPLICATION
  DIVISION
  MOD
  POWER
}

enum ArithmeticComparisonOperatorType {
  EQUAL_TO
  NOT_EQUAL_TO
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
}

enum UnaryArithmeticOperatorType {
  MINUS
  PLUS
}

enum BinaryLogicalOperatorType {
  AND
  OR
  XOR
}

enum UnaryLogicalOperatorType {
  NOT
  IS_NULL
  IS_NOT_NULL
}

enum UnaryGraphObjectLogicalOperatorType {
  IS_NULL
  IS_NOT_NULL
}

/*
 * Indicates if the labelset represented is theoretically satisfiable or not.
 *
 * If it is undefined, it matches every labels.
 * If it is defined, but empty, matching semantics differs:
 *  1. a vertex must have *all* of the labels
 *  2. an edge must have *one* of the labels
 *
 * A labelset can be non-satisfiable (false, also known as contradicting) if,
 * for the same edge variable edge1, the following labelset constraints
 * were given in the query:
 *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
 *  2. [edge1:C], so edge1 needs to have label C.
 *  These are contradicting as a single edge instance can have at most one label.
 */
enum LabelSetStatus {
  /*
   * Each edge and vertex satisfies an empty labelset constraint
   */
  EMPTY
  /*
   * Theoretically, a non-empty labelset constraint is satisfiable,
   * but matching semantics differ for different variables:
   *  1. a vertex must have *all* of the labels
   *  2. an edge must have *one* of the labels
   */
  NON_EMPTY
  /*
   * A labelset constraint might be non-satisfiable,
   * in case it is a combination of multiple  labelset constraints.
   *
   * For an edge variable, the combination of the following labelset constraints
   * is contradicting, thus un-satisfiable:
   *  1. [edge1:A|B], so edge1 needs to have either label A, either label B
   *  2. [edge1:C], so edge1 needs to have label C.
   * These are contradicting as a single edge instance can have at most one label.
   */
  CONTRADICTING
}

/*
 * example data set:
 *
 CREATE
  (a:Node {name: 'a'}),
  (b:Node {name: 'b'}),
  (c:Node {name: 'c'}),
  (a)-[:REL {x: 1}]->(b)-[:REL {x: 2}]->(c),
  (a)-[:REL {x: 3}]->(c),
  (a)-[:REL {x: 4}]->(c)
 */
enum PathSemantics {
/*
query

MATCH p=( (a {name: 'a'})-[r:REL*]->(c {name: 'c'}) )
RETURN r, p

results
╒════════════════╤═════════════════════════════════════════════════╕
│r               │p                                                │
╞════════════════╪═════════════════════════════════════════════════╡
│[{x: 4}]        │[{name: a}, {x: 4}, {name: c}]                   │
├────────────────┼─────────────────────────────────────────────────┤
│[{x: 3}]        │[{name: a}, {x: 3}, {name: c}]                   │
├────────────────┼─────────────────────────────────────────────────┤
│[{x: 1}, {x: 2}]│[{name: a}, {x: 1}, {name: b}, {x: 2}, {name: c}]│
└────────────────┴─────────────────────────────────────────────────┘
 */
  ALL_PATHS

/*
query

MATCH p=shortestPath( (a {name: 'a'})-[r:REL*]->(c {name: 'c'}) )
RETURN r, p

results
╒════════╤══════════════════════════════╕
│r       │p                             │
╞════════╪══════════════════════════════╡
│[{x: 3}]│[{name: a}, {x: 3}, {name: c}]│
└────────┴──────────────────────────────┘
 */
  SHORTEST_PATH

/*
query

MATCH p=allShortestPaths( (a {name: 'a'})-[r:REL*]->(c {name: 'c'}) )
RETURN r, p

results
╒════════╤══════════════════════════════╕
│r       │p                             │
╞════════╪══════════════════════════════╡
│[{x: 3}]│[{name: a}, {x: 3}, {name: c}]│
├────────┼──────────────────────────────┤
│[{x: 4}]│[{name: a}, {x: 4}, {name: c}]│
└────────┴──────────────────────────────┘
 */
  ALL_SHORTEST_PATH
}
